install yarn
install global babel 

yarn init

yarn add babel-preset-react babel-preset-env
to link babel to do its thing
babel indecision/src/app.js --out-file=indecision/public/scripts/app.js --presets=env,react (--watch)

the watch will auto change while it waits for changes
className not class for jsx, most are the same except for certain ones


   <Header title = {title}/> .... then can call this with this.props later



   
//example of state and state changing 

class VisibilityToggle extends React.component {
    constructor(props){
        super(props);
        this.handleToggleVisibility = this.handleToggleVisibility.bind(this);
        this.state = {
            visibility: false
        };
    }
    handleToggleVisibility(){
        this.setState ((prevState) => {
            return {
                visibility: !prevState.visibility
            }
        })
    }
    render(){
        return(
            <div>
            <button onClick ={this.handleToggleVisibility}>
                {this.state.visibility ? 'Hide details' : 'show details'}
            </button>
        
            </div>
        ) 
    }
}

ReactDOM.render(<VisibilityToggle/>, document.getElementById('app'))


if you want a child element to call stuff using information in the parent, you should send a function from the 
parent (example<Action  handlePick = {this.handlePick}/>)to the child and then have the child call it. 
you have to bind the function in the parent though...  this.handlePick = this.handlePick.bind(this);
--------
can get rid of bind.this crap by.... instead of using constructors use class structure and arrow functions... arrow functions use parents of this. 
i.e. instead of:
handleAddoptions(e) {...... handleAddOption = (e) => { ...... this fixes the this.bind issue




webpack
------

webpack allows you to only import one script instead of multiple src files that take a long time to load, webpack also lets you import things similar to node
grabbing variables from different files

//webpack config needs 2 things

//entry -> output
const path = require('path');


module.exports = {
    entry: './indecision/src/app.js',
    output: {
        path: path.join(__dirname, '/indecision/public'),
        filename: 'bundle.js'
    }
};


for import/export you need to use first export the proper function/object you want i.e. (const square = (x) => x * x; export { square };)

then from the file you want to import the function to import {square} from './util.js' ;    (if default you leave off the {} to import but also can change name when import)
settipng up JSX with babel ... 54.
and babelrc for stuff

sourcemaps allow for errors 


STYLING =============
for react: 

css-loader and style-loader ... for css

sass-loader for scss and node-sass for scss

normalize.... resets css styles for all browsers to default them kind of.

react router-----=----------------------=======================

handles routes ... from react-router-document

uses browser router.... switch.. and route 

import { BrowserRouter, Route, Switch, Link, NavLink } from 'react-router-dom';

const AppRouter = () => (
    <BrowserRouter> 
       <div className="outer">
            <div className ="inner">
                <Header/>
                    <Switch>
                    <Route path="/" component={ExpenseDashboardPage} exact={true} />
                    <Route path="/create" component={AddExpensePage} exact={true} />
                    <Route path="/edit/:id" component={EditExpensePage} exact={true} />
                    <Route path="/help" component={HelpPage} exact={true} />
                    <Route component={NotFound}  />
                </Switch>
            </div>
       </div>


    </BrowserRouter>  

);

export default AppRouter;

then you render that router 
ReactDOM.render(<AppRouter />, document.getElementById('app'));

react router... allows for the actual non-refreshing of pages when you switch...
this uses javascript to change what gets rendered to the screen avoiding sending html pages
all client based insetad of router to server back to front 


react redux part 1 =========================================================

for more complex apps....  handles multiple state / state container
the problem with simple non redux apps is that you have to constantly pass down props
and they have to all be connected to pass down the props/data
it also allows to re-use functions/components and data stuff

import { something } from 'redux'

const store = sonething((state = { stateoption: 0 }, action) => { })

actions------

you have to detail what you want 

store.dispatch({
    type: 'INCREMENT'
})

const store = sonething((state = { stateoption: 0 }, action) => { 
    if (action.type === 'INCREMENT')
      return {count: state.count + 1}
       else return state
})

more common for this instead of if/else..... its easier for switch in complex things then if/else

const store = sonething((state = { stateoption: 0 }, action) => { 
    switch (action.type){
        case 'INCREMENT':
        return {count: state.count + 1}
    };
    case 'DECREMENT':
    return {
        count: state.count -1
    }
    default: return state;
})

store.dispatch({type: 'DECREMENT'})


-------- redux method for checks for changes 

const poopStop = store.subscribe (() => {
    console.log(store.getState())
})

you can put that anywhere and it will be called when store state changes ^^ 
to stop it you just call it again

poopStop();

can also do pass more then one thing in dispatchj

store.dispatch({
    type: 'INCREMENT',
    IncrementBy: 5
})


if increment by ius a number add to it... if not default 1

and in store---
    switch (action.type){
        case 'INCREMENT':
        const IncrementBy: = typeof action.incremebtby === 'number' ? action.incrementBy : 1
        return {count: state.count + incrementBy}
    };


---- destructuring==============================

const person = {
    location: {
        city: 'pp'
        temp: 92
    }
}

const {city, temp} = person.location
can call city and temp directly by stealing it off (destructuring) person.;

can also do this: {city, temp: temperature} 
this  changes the name of temp to temperature

can change and make default at same time     { name: publisherName = 'default vALEU'}

can do with arrays: 

const item = {'coffee, 2, 2.5, 2.75}

const [coff, , medprice,] = item;


---- reducers are pure functions (have no global scope variables or make those equal to it)

state and count should not be changed directly.... just returned with the mutation


can make multiple reducers with combineReducers import from redux

high order components------ (HOC)

regular component that renders another component
you could have 1 higher order component making several regular components
the goal of this is to reuse code , and render hijacking"", and propmanipulation and abstract states.

----install redux to connect to react
provides ..... provider function and connect to connect to the redux store
npm install react-redux@5.0.5


TO ACCESS PROPS YOU MUST USE THE CONSTRUCTOR FUNCTION
connect is to dispatch changes daddy


if you need to keep track of state and pass them down to components.... you need to make a class based component no just stateless function component
i.e
class ExpenselistFilters extends React.Component{
  state = {
    calenderFocused: null,
  };
  render(){

      also means you have to use this.props instead of props for stateleses



Testing  chapter 12 .... Jest best for react

npm add jest@20.0.4

  "scripts": {
    "serve": "live-server public/",
    "build": "webpack",
    "dev-server": "webpack-dev-server --watch",
    "test": "jest"}


make tests folder.... make files that have .test.js as ending, i.e. add.test.js

npm run test -- --watch with the --watch in the package.json file for auto doing stuff
example of test stuff: 

const add = (a,b) => a + b;


test('test', () => {
    const result = add(3,4);

   expect(result).toBe(7);


typically copy the folder and file names in the tests directory 
import the file and run an action


test ('remove expense ', () => {

    const action = removeExpense({ id: '123abc' });
    expect(action).toEqual({
        type: 'REMOVE_EXPENSE',
        id: '123abc'

    });

});

toEqual is how you compare objects/arrays, tobe wont let the properties compare properly 


TESTING REACT COMPONENTS -------------------------------------


for testing components of react they have a thing you can install


npm install react-test-renderer@16.0.0
must be save version of react??

two types of react testing shallow and full
import ReactShallowRenderer from 'react-test-renderer/shallow';

full does child components.... shallow is just the single one without dependants

test('', () => {
   const renderer = new ReactShallowRenderer();
   renderer.render(<Header />);
   
   expect(renderer.getRenderOutput()).toMatchSnapshot();
   
   console.log(renderer.getRenderOutput());
});




dont use TO EQUAL anymore for componets, snapshot will keep track of changes 

this created snapshot directory


---- - enzyme.... npm install enzyme@3..0.0   enzyme-adapter-react-16@1.0.0 and raf@3.3.2

have a setuptests file for setup ..... just go to 119.... it s dumb

enyzme to json ..... 

import toJSON from 'enzyme-to-json';

test('Header renderer', () => {
    const wrapper = shallow(<Header />)
    expect(toJSON(wrapper)).toMatchSnapshot();




__mocks__

you can get over moment issues in testing by making a mock folder 

